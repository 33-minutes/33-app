scalar DateTime

# A recorded meeting.
type Meeting {
  # The time at which this meeting ended.
  finished: DateTime

  # Meeting ID.
  id: ID

  # The time at which this meeting started.
  started: DateTime

  # Meeting title.
  title: String

  # Owner of this meeting.
  user: User
}

# The connection type for Meeting.
type MeetingConnection {
  # A list of edges.
  edges: [MeetingEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type MeetingEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Meeting
}

type Mutation {
  createMeeting(input: createMeetingInput!): createMeetingPayload
  createUser(input: createUserInput!): createUserPayload
  login(input: loginInput!): loginPayload
  logout(input: logoutInput!): logoutPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# The query root of this schema. See available queries.
type Query {
  # Get current user.
  user: User!
}

# A user.
type User {
  # Account creation date.
  created_at: DateTime

  # User email.
  email: String

  # User ID.
  id: ID

  # Get a meeting by ID.
  meeting(id: String!): Meeting!
  meetings(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): MeetingConnection

  # User full name.
  name: String
}

# Autogenerated input type of createMeeting
input createMeetingInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  finished: DateTime!
  started: DateTime!
  title: String
}

# Autogenerated return type of createMeeting
type createMeetingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  meeting: Meeting
}

# Autogenerated input type of createUser
input createUserInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  name: String!
  password: String!
}

# Autogenerated return type of createUser
type createUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# Autogenerated input type of login
input loginInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  email: String!
  password: String!
}

# Autogenerated return type of login
type loginPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}

# Autogenerated input type of logout
input logoutInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of logout
type logoutPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  user: User
}